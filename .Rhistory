library(tidyverse)
c(3, 4, 5, 6, 77.)
summary()
numbers <- c(3, 4, 5, 6, 77)
numbers %>%
mean()
numbers <- c(3, 4, 5, 6, 77)
numbers %>%
summary()
my_packages <- c("usethis", "devtools", "learnr", "tinytex")
my_packages <- c("usethis", "devtools", "learnr", "tinytex")
install.packages(my_packages, repos = "http://cran.rstudio.com")
remotes::install_github("kosukeimai/qss-package", build_vignettes = TRUE)
install.packages('tinytex')
tinytex::install_tinytex() # install TinyTeX
turnout <- read.csv("destktop/turnout.csv")
remotes::install_github("kosukeimai/qss-package", build_vignettes = TRUE)
force = TRUE
learnr::run_tutorial("00-intro", package = "qsslearnr")
learnr::run_tutorial("01-causality", package = "qsslearnr")
> learnr::run_tutorial("01-causality1", package = "qsslearnr")
learnr::run_tutorial("01-causality", package = "qsslearnr")
learnr::run_tutorial("01-causality1", package = "qsslearnr")
learnr::run_tutorial("01-causality1", package = "qsslearnr")
install.packages("rmarkdown")
brew install pandoc
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
install.packages("reticulate") and library(reticulate)
install.packages("reticulate")
library(reticulate)
library(readr)
turnout <- read_csv("Desktop/data/turnout.csv")
View(turnout)
View(turnout)
library(readr)
transphobia <- read_csv("Desktop/data/transphobia.csv")
View(transphobia)
head(dat)
dat <- transphobia
head(dat)
dim(dat)
summary(dat)
table(dat$treat_ind)
prop.table(table(dat$treat_ind))
round(100 * prop.table(table(dat$treat_ind)), digits=1)
round(100 * prop.table(table(dat$treat_ind)), digits=0)
learnr::run_tutorial(package = "qsslearnr")
learnr::run_tutorial("02-causality2", package = "qsslearnr")
library(readr)
boston <- read_csv("Desktop/data/boston.csv")
View(boston)
library(readr)
dat <- read_csv("Desktop/data/boston.csv")
View(dat)
View(dat)
library(readr)
boston <- read_csv("Desktop/data/boston.csv")
View(boston)
dim(boston)
library(readr)
newspapers <- read_csv("Desktop/data/newspapers.csv")
View(newspapers)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
dat <- read.csv("Desktop/data/newspapers.csv")
View(dat)
View(newspapers)
library(readr)
newspapers <- read.csv("Desktop/data/newspapers.csv")
View(newspapers)
```{r}
View(newspapers)
knitr::opts_chunk$set(echo = TRUE)
summary(newspapers)
treated <- subset(newspapers, subset = to_labour == 1)
control <- subset(newspapers, subset = to_labour == 0)
ate <- mean(treated$vote_lab_97) - mean(control$vote_lab_97)
ate
mean(treated$male)
mean(control$male)
trt_male <- treated[treated$male == 1,]
ctr_male <- control[control$male == 1,]
mean(trt_male$vote_lab_97) - mean(ctr_male$vote_lab_97)
trt_female <- treated[treated$male == 0,]
ctr_female <- control[control$male == 0,]
mean(trt_female$vote_lab_97) - mean(ctr_female$vote_lab_97)
vote_by_treat <- tapply(dat$vote_lab_97,dat$to_labour,mean)
vote_by_treat <- tapply(newspapers$vote_lab_97,newspapers$to_labour,mean)
vote_by_treat
ate <- vote_by_treat[2] - vote_by_treat[1]
ate
mean(treated$male)
mean(control$male)
trt_male <- treated[treated$male == 1,]
ctr_male <- control[control$male == 1,]
mean(trt_male$vote_lab_97) - mean(ctr_male$vote_lab_97)
mean(treated$male)
mean(control$male)
mean(treated$male)
mean(control$male)
trt_male <- treated[treated$male == 1,]
ctr_male <- control[control$male == 1,]
mean(trt_male$vote_lab_97) - mean(ctr_male$vote_lab_97)
plab_by_treat <- tapply(dat$parent_labour, dat$to_labour,mean)
plab_by_treat <- tapply(newspapers$parent_labour, newspapers$to_labour,mean)
plab_by_treat
trt_by_plab <- tapply(treated$vote_lab_97,treated$parent_labour,mean)
ctr_by_plab <- tapply(control$vote_lab_97,control$parent_labour,mean)
trt_by_plab #average of the outcome for treated, for parents that did and didn't
ctr_by_plab #average of the outcome for control, for parents that did and didn't
ate_by_plab <- trt_by_plab - ctr_by_plab
ate_by_plab #ate among parent not voting for labor much bigger!
treated_diff <- mean(treated$vote_lab_97) - mean(treated$vote_lab_92)
treated_diff
control_diff <- mean(control$vote_lab_97) - mean(control$vote_lab_92)
treated_diff - control_diff
learnr::run_tutorial("00-intro", package = "qsslearnr")
learnr::run_tutorial(package = "qsslearnr")
learnr::run_tutorial("03-measurement1", package = "qsslearnr")
learnr::run_tutorial("00-intro", package = "qsslearnr")
learnr::run_tutorial(package = "qsslearnr")
learnr::run_tutorial("04-measurement2", package = "qsslearnr")
learnr::run_tutorial(package = "qsslearnr")
learnr::run_tutorial("05-prediction1", package = "qsslearnr")
learnr::run_tutorial(package = "qsslearnr")
learnr::run_tutorial("09-uncertainty1", package = "qsslearnr")
plot(x = turnout$CVAP, y = turnout$turnout, pch = 16,
col = "blue")
plot(turnout$CVAP, turnout$turnout, pch = 16,
col = "blue")
cvap <- subset(turnout$cvap)
turnout <- read.csv("blackturnout.csv")
turnout <- na.omit(turnout)
years <- turnout$year
summary(years)
with <- subset(turnout, candidate == 1)
without <- subset(turnout, candidate == 0)
boxplot(turnout$turnout ~ turnout$candidate, xlab = "General Elections With/Without Black Candidates", ylab = "Proportion of Black Population in Voting Districts", names = c("Without", "With"), main = "Black Voter Turnout in Elections Based on Black Candidates")
regression <- lm(turnout ~ candidate, data = turnout)
regression
coef(regression)
summary(turnout$CVAP)
cvap <- subset(turnout$cvap)
summary(turnout$CVAP)
summary(turnout$turnout)
summary(turnout$CVAP)
summary(turnout$turnout)
plot(with$CVAP, with$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Turnout",
xlab = "Proportion of Black Voters in District Population")
points(without$CVAP, without$turnout, pch = 16, col = "blue")
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnoutwith$CVAP, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Turnout",
xlab = "Proportion of Black Voters in District Population")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Turnout",
xlab = "Proportion of Black Voters in District Population")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", inset=c(-0.2, 0), legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", inset=c(-0.4, 0), legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", inset=c(-0.2, 0), legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", inset=c(-0.1, 0), legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", inset=c(0, 0), legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", inset=c(1, 0), legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", "top", legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
par(mar=c(5, 4, 4, 8), xpd=TRUE)
legend("topright", inset=c(-0.2, 0), legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
par(mar=c(5, 4, 4, 8), xpd=TRUE)
legend("topright", legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", legend = c("No Candidate, Candidate"), pch = 16, col = c("red", "blue", bty = "n", cex = 0.8)
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", legend = c("No Candidate, Candidate"), pch = 16, col = c("red", "blue"), bty = "n", cex = 0.8)
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", legend = c("No Candidate", "Candidate"), pch = 16, col = c("red", "blue"), bty = "n", cex = 0.8)
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", legend = c("No Candidate", "Candidate"), pch = 16, col = c("red", "blue"), cex = 0.8)
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", legend = c("No Candidate", "Candidate"), pch = 16, col = c("red", "blue"), cex = 0.7)
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", legend = c("No Candidate", "Candidate"), pch = 16, col = c("red", "blue"), bty = "n", cex = 0.7)
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", legend = c("No Candidate", "Candidate"), pch = 16, col = c("red", "blue"), cex = 0.6)
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Populations",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", legend = c("No Candidate", "Candidate"), pch = 16, col = c("red", "blue"), cex = 0.6)
multi.regression <- lm(turnout ~ candidate + CVAP, data = turnout)
multi.regression
multi.regression <- lm(turnout ~ candidate + CVAP, data = turnout)
multi.regression
multi.regression <- lm(turnout ~ candidate + CVAP, data = turnout)
multi.regression
coef(multi.regression)
setwd("/Users/meha/Desktop/INFO/info201/code/final-deliverable-p03-mehasingal")
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(lubridate)
library(tidyr)
library(rsconnect)
library(shinythemes)
data <- read.csv("maryland_crash_report.csv")
data <- data %>%
mutate(Year = year(as.POSIXct(Crash.Date.Time, format = "%m/%d/%Y %I:%M:%S %p")))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/Desktop/INFO/info201/code/exploratory-analysis-p02-mehasingal/chart3_example.R")
View(substance_data)
runApp()
runApp()
runApp()
runApp()
runApp()
data$Crash.Date.Time <- as.POSIXct(data$Crash.Date.Time, format = "%m/%d/%Y %I:%M:%S %p")
# Define the substance abuse types of interest
substance_types <- c("ALCOHOL PRESENT", "ALCOHOL CONTRIBUTED",
"ILLEGAL DRUG CONTRIBUTED", "ILLEGAL DRUG PRESENT",
"COMBINATION CONTRIBUTED", "MEDICATION CONTRIBUTED",
"COMBINED SUBSTANCE PRESENT")
# Filter data for rows with the specified substance types
substance_data <- data %>%
filter(Driver.Substance.Abuse %in% substance_types) %>%
mutate(Year = format(Crash.Date.Time, "%Y")) %>%
group_by(Year, Driver.Substance.Abuse) %>%
summarise(Count = n()) %>%
group_by(Year) %>%
mutate(Percentage = (Count / sum(Count)) * 100)
# Create the interactive line graph using Plotly
output$substance_line_graph <- renderPlotly({
plot_ly(substance_data, x = ~Year, y = ~Percentage,
color = ~Driver.Substance.Abuse,
text = ~paste(Driver.Substance.Abuse, ":", Percentage, "%"),
type = "scatter", mode = "lines+markers") %>%
layout(title = "Percentage of Collisions for Specific Substance Abuse Types Over Time",
xaxis = list(title = "Year"),
yaxis = list(title = "Percentage (%)"))
})
runApp()
runApp()
runApp()
View(substance_data)
substance_data <- data %>%
filter(Driver.Substance.Abuse %in% substance_types) %>%
mutate(Year = format(Crash.Date.Time, "%Y")) %>%
group_by(Year, Driver.Substance.Abuse) %>%
#summarise(Count = n()) %>%
group_by(Year) %>%
mutate(Percentage = (Count / sum(Count)) * 100) %>%
arrange(Year)  # Sort the data by Year
substance_data <- data %>%
filter(Driver.Substance.Abuse %in% substance_types) %>%
mutate(Year = format(Crash.Date.Time, "%Y")) %>%
group_by(Year, Driver.Substance.Abuse)
View(substance_data)
library(dplyr)
library(ggplot2)
# Assuming your data frame is named "data"
# Convert the "Crash.Date.Time" column to a proper datetime format
data$Crash.Date.Time <- as.POSIXct(data$Crash.Date.Time, format = "%m/%d/%Y %I:%M:%S %p")
substance_types <- c("ALCOHOL PRESENT", "ALCOHOL CONTRIBUTED",
"ILLEGAL DRUG CONTRIBUTED", "ILLEGAL DRUG PRESENT",
"COMBINATION CONTRIBUTED", "MEDICATION CONTRIBUTED",
"COMBINED SUBSTANCE PRESENT")
filtered_data <- data %>%
filter(Driver.Substance.Abuse %in% substance_types) %>%
mutate(Year = format(Crash.Date.Time, "%Y")) %>%
arrange(Year)  # Sort the data by Year
View(filtered_data)
# Create the line graph using ggplot2
ggplot(filtered_data, aes(x = Year, group = Driver.Substance.Abuse)) +
geom_line(aes(y = stat(count / sum(count)) * 100, color = Driver.Substance.Abuse)) +
geom_point(aes(y = stat(count / sum(count)) * 100, color = Driver.Substance.Abuse)) +
labs(title = "Percentage of Collisions for Specific Substance Abuse Types Over Time",
x = "Year",
y = "Percentage (%)",
color = "Substance Type") +
scale_color_manual(values = c("ALCOHOL PRESENT" = "blue",
"ALCOHOL CONTRIBUTED" = "green",
"ILLEGAL DRUG CONTRIBUTED" = "red",
"ILLEGAL DRUG PRESENT" = "purple",
"COMBINATION CONTRIBUTED" = "orange",
"MEDICATION CONTRIBUTED" = "pink",
"COMBINED SUBSTANCE PRESENT" = "brown")) +
theme_minimal()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if (selected_substance == "All") {
# Create a placeholder data frame for "All" option
substance_data <- data %>%
mutate(Year = format(Crash.Date.Time, "%Y")) %>%
group_by(Year) %>%
summarise(Count = n()) %>%
mutate(Percentage = (Count / sum(Count)) * 100)
graph_title <- "Percentage of Collisions for All Substance Types Over Time"
} else {
# Filter data for the selected substance type
substance_data <- data %>%
filter(Driver.Substance.Abuse == selected_substance) %>%
mutate(Year = format(Crash.Date.Time, "%Y")) %>%
group_by(Year) %>%
summarise(Count = n()) %>%
mutate(Percentage = (Count / sum(Count)) * 100)
graph_title <- sprintf("Percentage of Collisions for %s Over Time", selected_substance)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("/Users/meha/Desktop/INFO/info201/code/final-deliverable-p03-mehasingal")
shiny::runApp()
