library(tidyverse)
c(3, 4, 5, 6, 77.)
summary()
numbers <- c(3, 4, 5, 6, 77)
numbers %>%
mean()
numbers <- c(3, 4, 5, 6, 77)
numbers %>%
summary()
my_packages <- c("usethis", "devtools", "learnr", "tinytex")
my_packages <- c("usethis", "devtools", "learnr", "tinytex")
install.packages(my_packages, repos = "http://cran.rstudio.com")
remotes::install_github("kosukeimai/qss-package", build_vignettes = TRUE)
install.packages('tinytex')
tinytex::install_tinytex() # install TinyTeX
turnout <- read.csv("destktop/turnout.csv")
remotes::install_github("kosukeimai/qss-package", build_vignettes = TRUE)
force = TRUE
learnr::run_tutorial("00-intro", package = "qsslearnr")
learnr::run_tutorial("01-causality", package = "qsslearnr")
> learnr::run_tutorial("01-causality1", package = "qsslearnr")
learnr::run_tutorial("01-causality", package = "qsslearnr")
learnr::run_tutorial("01-causality1", package = "qsslearnr")
learnr::run_tutorial("01-causality1", package = "qsslearnr")
install.packages("rmarkdown")
brew install pandoc
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
install.packages("reticulate") and library(reticulate)
install.packages("reticulate")
library(reticulate)
library(readr)
turnout <- read_csv("Desktop/data/turnout.csv")
View(turnout)
View(turnout)
library(readr)
transphobia <- read_csv("Desktop/data/transphobia.csv")
View(transphobia)
head(dat)
dat <- transphobia
head(dat)
dim(dat)
summary(dat)
table(dat$treat_ind)
prop.table(table(dat$treat_ind))
round(100 * prop.table(table(dat$treat_ind)), digits=1)
round(100 * prop.table(table(dat$treat_ind)), digits=0)
learnr::run_tutorial(package = "qsslearnr")
learnr::run_tutorial("02-causality2", package = "qsslearnr")
library(readr)
boston <- read_csv("Desktop/data/boston.csv")
View(boston)
library(readr)
dat <- read_csv("Desktop/data/boston.csv")
View(dat)
View(dat)
library(readr)
boston <- read_csv("Desktop/data/boston.csv")
View(boston)
dim(boston)
library(readr)
newspapers <- read_csv("Desktop/data/newspapers.csv")
View(newspapers)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
dat <- read.csv("Desktop/data/newspapers.csv")
View(dat)
View(newspapers)
library(readr)
newspapers <- read.csv("Desktop/data/newspapers.csv")
View(newspapers)
```{r}
View(newspapers)
knitr::opts_chunk$set(echo = TRUE)
summary(newspapers)
treated <- subset(newspapers, subset = to_labour == 1)
control <- subset(newspapers, subset = to_labour == 0)
ate <- mean(treated$vote_lab_97) - mean(control$vote_lab_97)
ate
mean(treated$male)
mean(control$male)
trt_male <- treated[treated$male == 1,]
ctr_male <- control[control$male == 1,]
mean(trt_male$vote_lab_97) - mean(ctr_male$vote_lab_97)
trt_female <- treated[treated$male == 0,]
ctr_female <- control[control$male == 0,]
mean(trt_female$vote_lab_97) - mean(ctr_female$vote_lab_97)
vote_by_treat <- tapply(dat$vote_lab_97,dat$to_labour,mean)
vote_by_treat <- tapply(newspapers$vote_lab_97,newspapers$to_labour,mean)
vote_by_treat
ate <- vote_by_treat[2] - vote_by_treat[1]
ate
mean(treated$male)
mean(control$male)
trt_male <- treated[treated$male == 1,]
ctr_male <- control[control$male == 1,]
mean(trt_male$vote_lab_97) - mean(ctr_male$vote_lab_97)
mean(treated$male)
mean(control$male)
mean(treated$male)
mean(control$male)
trt_male <- treated[treated$male == 1,]
ctr_male <- control[control$male == 1,]
mean(trt_male$vote_lab_97) - mean(ctr_male$vote_lab_97)
plab_by_treat <- tapply(dat$parent_labour, dat$to_labour,mean)
plab_by_treat <- tapply(newspapers$parent_labour, newspapers$to_labour,mean)
plab_by_treat
trt_by_plab <- tapply(treated$vote_lab_97,treated$parent_labour,mean)
ctr_by_plab <- tapply(control$vote_lab_97,control$parent_labour,mean)
trt_by_plab #average of the outcome for treated, for parents that did and didn't
ctr_by_plab #average of the outcome for control, for parents that did and didn't
ate_by_plab <- trt_by_plab - ctr_by_plab
ate_by_plab #ate among parent not voting for labor much bigger!
treated_diff <- mean(treated$vote_lab_97) - mean(treated$vote_lab_92)
treated_diff
control_diff <- mean(control$vote_lab_97) - mean(control$vote_lab_92)
treated_diff - control_diff
learnr::run_tutorial("00-intro", package = "qsslearnr")
learnr::run_tutorial(package = "qsslearnr")
learnr::run_tutorial("03-measurement1", package = "qsslearnr")
learnr::run_tutorial("00-intro", package = "qsslearnr")
learnr::run_tutorial(package = "qsslearnr")
learnr::run_tutorial("04-measurement2", package = "qsslearnr")
learnr::run_tutorial(package = "qsslearnr")
learnr::run_tutorial("05-prediction1", package = "qsslearnr")
learnr::run_tutorial(package = "qsslearnr")
learnr::run_tutorial("09-uncertainty1", package = "qsslearnr")
plot(x = turnout$CVAP, y = turnout$turnout, pch = 16,
col = "blue")
plot(turnout$CVAP, turnout$turnout, pch = 16,
col = "blue")
cvap <- subset(turnout$cvap)
turnout <- read.csv("blackturnout.csv")
turnout <- na.omit(turnout)
years <- turnout$year
summary(years)
with <- subset(turnout, candidate == 1)
without <- subset(turnout, candidate == 0)
boxplot(turnout$turnout ~ turnout$candidate, xlab = "General Elections With/Without Black Candidates", ylab = "Proportion of Black Population in Voting Districts", names = c("Without", "With"), main = "Black Voter Turnout in Elections Based on Black Candidates")
regression <- lm(turnout ~ candidate, data = turnout)
regression
coef(regression)
summary(turnout$CVAP)
cvap <- subset(turnout$cvap)
summary(turnout$CVAP)
summary(turnout$turnout)
summary(turnout$CVAP)
summary(turnout$turnout)
plot(with$CVAP, with$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Turnout",
xlab = "Proportion of Black Voters in District Population")
points(without$CVAP, without$turnout, pch = 16, col = "blue")
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnoutwith$CVAP, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Turnout",
xlab = "Proportion of Black Voters in District Population")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Turnout",
xlab = "Proportion of Black Voters in District Population")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", inset=c(-0.2, 0), legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", inset=c(-0.4, 0), legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", inset=c(-0.2, 0), legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", inset=c(-0.1, 0), legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", inset=c(0, 0), legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", inset=c(1, 0), legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", "top", legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
par(mar=c(5, 4, 4, 8), xpd=TRUE)
legend("topright", inset=c(-0.2, 0), legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
par(mar=c(5, 4, 4, 8), xpd=TRUE)
legend("topright", legend=c("No Candidate","Candidate"), col=c("red","blue"))
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", legend = c("No Candidate, Candidate"), pch = 16, col = c("red", "blue", bty = "n", cex = 0.8)
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", legend = c("No Candidate, Candidate"), pch = 16, col = c("red", "blue"), bty = "n", cex = 0.8)
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", legend = c("No Candidate", "Candidate"), pch = 16, col = c("red", "blue"), bty = "n", cex = 0.8)
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", legend = c("No Candidate", "Candidate"), pch = 16, col = c("red", "blue"), cex = 0.8)
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", legend = c("No Candidate", "Candidate"), pch = 16, col = c("red", "blue"), cex = 0.7)
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", legend = c("No Candidate", "Candidate"), pch = 16, col = c("red", "blue"), bty = "n", cex = 0.7)
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Population",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", legend = c("No Candidate", "Candidate"), pch = 16, col = c("red", "blue"), cex = 0.6)
summary(turnout$CVAP)
summary(turnout$turnout)
plot(without$CVAP, without$turnout, pch = 16,
col = "red",
xlim = c(0.005, 0.700), ylim = c(0.07, 1.0),
ylab = "Black Voter Turnout",
xlab = "Proportion of Black Voters in Overall District Populations",
main = "Average Black Voter Turnout by District Population Proportion")
points(with$CVAP, with$turnout, pch = 16, col = "blue")
legend("topright", legend = c("No Candidate", "Candidate"), pch = 16, col = c("red", "blue"), cex = 0.6)
multi.regression <- lm(turnout ~ candidate + CVAP, data = turnout)
multi.regression
multi.regression <- lm(turnout ~ candidate + CVAP, data = turnout)
multi.regression
multi.regression <- lm(turnout ~ candidate + CVAP, data = turnout)
multi.regression
coef(multi.regression)
setwd("/Users/meha/Desktop/INFO/info201/code/final-deliverable-p03-mehasingal")
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(lubridate)
library(tidyr)
data <- read.csv("maryland_crash_report.csv")
data <- data %>%
mutate(Year = year(as.POSIXct(Crash.Date.Time, format = "%m/%d/%Y %I:%M:%S %p")))
filtered_data <- reactive({
data %>%
filter(Year >= input$yearRange[1], Year <= input$yearRange[2])
})
output$collision_bargraph <- renderPlotly({
filtered_crashes <- filtered_data()
collision_occurance <- table(filtered_crashes$`Collision Type`)
collision_occurance_df <- data.frame("Collision Type" = names(collision_occurance), "Count" = as.vector(collision_occurance))
selected_num_top <- input$numTop
runApp()
runApp()
source("ui.r")
source("server.r")
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
output$interactive_plot <- renderPlotly({
data$Crash.Date.Time <- as.Date(data$Crash.Date.Time, format = "%m/%d/%Y")
filtered <- data %>%
select(Crash.Date.Time, Driver.Substance.Abuse)
# filter data for only alcohol contributed crashes
alcohol_contributed_data <- filtered %>%
filter(Driver.Substance.Abuse == "ALCOHOL CONTRIBUTED")
# summarize the data by date to get counts
count_data <- alcohol_contributed_data %>%
group_by(Crash.Date.Time) %>%
summarise(Count = n())
# Filter data based on the selected month or all months
selected_month <- input$selected_month
if (selected_month == "All Months") {
plot_title <- "Number of Alcohol-Related Vehicle Crashes Over Time"
} else {
count_data <- count_data %>%
filter(format(Crash.Date.Time, "%B") == selected_month)  # Use the original column name
plot_title <- paste("Number of Alcohol-Related Vehicle Crashes in", selected_month)
}
# Create the interactive bar plot
alcohol_related_accidents_overtime <- ggplot(count_data, aes(x = Crash.Date.Time, y = Count)) +
geom_bar(stat = "identity", fill = "blue", color = "blue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = plot_title, x = "Date", y = "Number of Crashes")
ggplotly(alcohol_related_accidents_overtime)
})
runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(lubridate)
library(tidyr)
library(rsconnect)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(plotly)
library(shinythemes)
library(dplyr)
library(lubridate)
library(tidyr)
ui <- fluidPage(
theme = shinytheme("cosmo"),
h1("Analysis of Vehicle Collisions in Maryland"),
navbarPage(
title = "INFO 201 Final Project",
id = "navtabs",
# Introduction tab
tabPanel("Introduction",
h1("Project Overview"),
p("Welcome to our data exploration project."),
p("We will be analyzing XYZ data to answer questions related to ABC."),
p("The data was sourced from [Data Source](link_to_data_source).")
),
# Collision Types tab
tabPanel("Collision Types",
h1("Vehicle Collision Types from 2015-2023"),
# Sidebar with sliding range and top N selection widgets
sidebarLayout(
sidebarPanel(
sliderInput("yearRange",
"Select Years:",
min = min(data$Year),
max = max(data$Year),
value = c(2015, 2020),
step = 1),
selectInput("numTop", "Top N Collision Types:", choices = c("All", 5, 10, 15), selected = "All")
),
mainPanel(
plotlyOutput("collision_bargraph")
)
)
),
# Alcohol-Related Crashes tab
tabPanel("Alcohol-Related Crashes",
h1("Alcohol-Related Vehicle Crashes Over Time"),
# Sidebar with a select input widget
sidebarLayout(
sidebarPanel(
selectInput("selected_month", "Select Month:",
choices = c("All Months", month.name))
),
# Main panel with the interactive plot
mainPanel(
plotlyOutput("interactive_plot")
)
)
),
# Vehicle Make and Model tab
tabPanel("Vehicle Make and Model",
h1("Relationship between Top 10 Vehicle Makes and Injury Severity"),
mainPanel(
plotlyOutput("injury_plot")
),
uiOutput("severity_input")
),
# Conclusions tab
tabPanel("Conclusions",
h1("Project Conclusions"),
p("In summary, our analysis revealed the following major takeaways:"),
# Add text and other elements to present your conclusions
# ...
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
